{
  "navbar": {
    "welcome": "Learn APG"
  },
  "greeting": {
    "WhoAmITitle": "Who am I?",
    "intro": "Hi there ðŸ‘‹, my name is Andrea, I am a Frontend Developer based in Taiwan.",
    "goal": "Learn APG",
    "whyTitle": "Why I want to do this?",
    "description": "This is my side-project to learn APG. I will try to build a website with APG and share my experience with you and sice there's no Traditional Chinese version of APG, I will also translate it into Traditional Chinese. If you have any questions, please feel free to contact me."
  },
  "navigate": {
    "goto": "Go to"
  },
  "routes": {
    "accordion": "Accordion",
    "alert": "Alert",
    "alertDialog": "Alert and Message Dialogs",
    "breadcrumb": "Breadcrumb",
    "button": "Button",
    "carousel": "Carousel",
    "checkbox": "Checkbox",
    "combobox": "Combobox",
    "dialog": "Dialog",
    "disclosure": "Disclosure",
    "grid": "Grid",
    "landmarks": "Landmarks",
    "links": "Links"
  },
  "aria": {
    "readFirst": "Read Me First",
    "noAriaIsBetterThanBadAria": "No ARIA is better than Bad ARIA",
    "paragraph-1": "Functionally, ARIA roles, states, and properties are analogous to a CSS for assistive technologies. For screen reader users, ARIA controls the rendering of their non-visual experience. Incorrect ARIA misrepresents visual experiences, with potentially devastating effects on their corresponding non-visual experiences.",
    "paragraph-2": "Before using ARIA or any of the guidance in this document, please take time to understand the following two essential principles.",
    "principle-1": " A role is a promise",
    "principleDescription-1": "This code: , is a promise that the author of that <div> has also incorporated JavaScript that provides the keyboard interactions expected for a button. Unlike HTML input elements, ARIA roles do not cause browsers to provide keyboard behaviors or styling.",
    "principle-2": "Principle 2: ARIA Can Both Cloak and Enhance, Creating Both Power and Danger",
    "principleDescription-2": "The information assistive technologies need about the meaning and purpose of user interface elements is called accessibility semantics. From the perspective of assistive technologies, ARIA gives authors the ability to dress up HTML and SVG elements with critical accessibility semantics that the assistive technologies would not otherwise be able to reliably derive.",
    "principleDescription-3": "Some of ARIA is like a cloak; it covers up, or overrides, the original semantics or content.",
    "principleDescription-4": "On the other hand, some uses of ARIA are more like suspenders or belts; they add meaning that provides essential support to the original content.",
    "principleDescription-5": "This is the power of ARIA. It enables authors to describe nearly any user interface component in ways that assistive technologies can reliably interpret, thus making components accessible to assistive technology users.",
    "principleDescription-6": "This is also the danger of ARIA. Authors can inadvertently override accessibility semantics.",
    "browserAndAssistiveTech": "Browser and Assistive Technology Support",
    "browserAndAssitiveDesciption-1": "<span className=\"span-style\">Testing assistive technology</span> interoperability is essential before using code from this guide in production. Because the purpose of this guide is to illustrate appropriate use of ARIA 1.2 as defined in the ARIA specification, the design patterns, reference examples, and sample code intentionally do not describe and implement coding techniques for working around problems caused by gaps in support for ARIA 1.2 in browsers and assistive technologies. It is thus advisable to test implementations thoroughly with each browser and assistive technology combination that is relevant within a target audience.",
    "browserAndAssitiveDesciption-2": "Similarly, JavaScript and CSS in this guide is written to be compatible with the most recent version of Chrome, Firefox, and Safari at the time of writing. Some JavaScript and CSS may not function correctly in Internet Explorer.",
    "browserAndAssitiveDesciption-3": "Except in cases where the ARIA Working Group and other contributors have overlooked an error, examples in this guide that do not function well in a particular browser or with a specific assistive technology are demonstrating browser or assistive technology bugs. Browser and assistive technology developers can thus utilize code in this guide to help assess the quality of their support for ARIA 1.2.",
    "mobileAndTouchSupport": "Mobile and Touch Support",
    "mobileAndTouchDescription-1": "Currently, this guide does not indicate which examples are compatible with mobile browsers or touch interfaces. While some of the examples include specific features that enhance mobile and touch support, some ARIA features are not supported in any mobile browser. In addition, there is not yet a standardized approach for providing touch interactions that work across mobile browsers.",
    "mobileAndTouchDescription-2": "The ARIA Working Group is actively working on a new version of ARIA that will include features to support mobile and touch interactions. This guide will be updated to reflect those changes when they are available."
  },
  "accordion": {
    "title": "Accordion Pattern (Sections With Show/Hide Functionality)",
    "about": "An accordion is a vertically stacked set of interactive headings that each contain a title, content snippet, or thumbnail representing a section of content. The headings function as controls that enable users to reveal or hide their associated sections of content. Accordions are commonly used to reduce the need to scroll when presenting multiple sections of content on a single page.",
    "termsUnderstaning": "Terms for understanding accordions include:",
    "header": "Accordion Header:",
    "panel": "Accordion Panel:",
    "headerContent": "Label for or thumbnail representing a section of content that also serves as a control for showing, and in some implementations, hiding the section of content.",
    "panelContent": "Section of content associated with an accordion header.",
    "aboutConclusion": "In some accordions, there are additional elements that are always visible adjacent to the accordion header. For instance, a menubutton may accompany each accordion header to provide access to actions that apply to that section. And, in some cases, a snippet of the hidden content may also be visually persistent.",
    "keyboardInteraction": "Keyboard Interaction",
    "enter": "Enter",
    "or": "or",
    "space": "Space:",
    "enterOrSpacePoint1": "When focus is on the accordion header for a collapsed panel, expands the associated panel. If the implementation allows only one panel to be expanded, and if another panel is expanded, collapses that panel.",
    "enterOrSpacePoint2": "When focus is on the accordion header for an expanded panel, collapses the panel if the implementation supports collapsing. Some implementations require one panel to be expanded at all times and allow only one panel to be expanded; so, they do not support a collapse function.",
    "tab": "Tab:",
    "tabPoint": "Moves focus to the next focusable element; all focusable elements in the accordion are included in the page Tab sequence.",
    "shiftPlusTab": "Shift + Tab",
    "shiftTabPoint": "Moves focus to the previous focusable element; all focusable elements in the accordion are included in the page Tab sequence.",
    "downArrow": "Down Arrow",
    "option": "(Option)",
    "optionPoint": "If focus is on an accordion header, moves focus to the next accordion header. If focus is on the last accordion header, either does nothing or moves focus to the first accordion header.",
    "upArrow": "Up Arrow",
    "upArrowPoint": " If focus is on an accordion header, moves focus to the previous accordion header. If focus is on the first accordion header, either does nothing or moves focus to the last accordion header.",
    "home": "Home",
    "homePoint": "When focus is on an accordion header, moves focus to the first accordion heade.",
    "end": "End",
    "endPoint": "When focus is on an accordion header, moves focus to the last accordion header.",
    "waiRoles": "WAI-ARIA Roles, States, and Properties",
    "point-1": "The title of each accordion header is contained in an element with role button.",
    "point-2": "Each accordion header button is wrapped in an element with role heading that has a value set for aria-level that is appropriate for the information architecture of the page.",
    "point-2-1": "If the native host language has an element with an implicit heading and aria-level, such as an HTML heading tag, a native host language element may be used.",
    "point-2-2": "The button element is the only element inside the heading element. That is, if there are other visually persistent elements, they are not included inside the heading element.",
    "point-3": "If the accordion panel associated with an accordion header is visible, the header button element has aria-expanded set to true. If the panel is not visible, aria-expanded is set to false.",
    "point-4": "The accordion header button element has aria-controls set to the ID of the element containing the accordion panel content.",
    "point-5": "If the accordion panel associated with an accordion header is visible, and if the accordion does not permit the panel to be collapsed, the header button element has aria-disabled set to true.",
    "point-6": "Optionally, each element that serves as a container for panel content has role region and aria-labelledby with a value that refers to the button that controls display of the panel.",
    "point-6-1": "Avoid using the region role in circumstances that create landmark region proliferation, e.g., in an accordion that contains more than approximately 6 panels that can be expanded at the same time.",
    "point-6-2": "Role region is especially helpful to the perception of structure by screen reader users when panels contain heading elements or a nested accordion."
  }
}
